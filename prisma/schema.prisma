generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                 @id @default(cuid())
  clerkUserId           String                 @unique
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation? 
  accounts              Account[]             
  comments              BlogComment[]         
  payments              Payment[]          
  favoriteCourses       FavoriteCourses[]   
  cartCourses           CartCourses[]      
  orders  Order[]
  termsAccepted         String?
}

model NewsletterSubscription {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Order {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    String
  advance   Float
  total     Float
  date      DateTime @default(now())
  status    String
  hasRates  Boolean  @default(false)
  //TODO add nr rate 
}

model FavoriteCourses {
  id          String @id @default(cuid())
  userId      String
  title       String
  price       String
  description String
  link        String
  user        User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model CartCourses {
  id          String @id @default(cuid())
  userId      String
  title       String
  price       String
  description String
  link        String
  user        User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Payment {
  id                   String  @id @default(cuid())
  userId               String
  amount               Float
  rawData              String
  eventType            String
  timeString           String
  dateTime             String
  receiptEmail         String?
  receiptUrl           String?
  paymentMethodDetails String
  billingDetails       String
  currency             String?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model BlogComment {
  id            Int      @id @default(autoincrement())
  content       String
  createdAt     DateTime @default(now())
  userId        String
  blogPostTitle String
  user          User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String  @id @unique @default(cuid())
  title       String
  description String
  images      String?
  link        String
  price       String
  video       String?
  generalInfo Json?
}

enum UserRole {
  ADMIN
  USER
}
